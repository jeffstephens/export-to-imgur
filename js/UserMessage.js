// Generated by CoffeeScript 1.7.1
(function() {
  var UserMessage,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  UserMessage = (function() {
    function UserMessage() {
      this.setText = __bind(this.setText, this);
      this.setTitle = __bind(this.setTitle, this);
      this.setLevel = __bind(this.setLevel, this);
      this.level = this.title = this.text = null;
      this.time = Date.now();
    }

    UserMessage.prototype.setLevel = function(newLevel) {
      var allowedLevels;
      if (newLevel == null) {
        throw new Error("UserMessage.setLevel requires a level string as a parameter.");
      }
      newLevel = newLevel.trim().toLowerCase();
      allowedLevels = ["error", "warning", "info", "success"];
      if (__indexOf.call(allowedLevels, newLevel) >= 0) {
        return this.level = newLevel;
      } else {
        throw new Error("" + newLevel + " is not a valid message level.");
      }
    };

    UserMessage.prototype.setTitle = function(newTitle) {
      if (newTitle == null) {
        throw new Error("UserMessage.setTitle requires a text string as a parameter.");
      }
      newTitle = newTitle.trim();
      if (newTitle.length > 0) {
        return this.title = newTitle;
      } else {
        throw new Error("Tried to update message title to a blank string.");
      }
    };

    UserMessage.prototype.setText = function(newText) {
      if (newText == null) {
        throw new Error("UserMessage.setText requires a text string as a parameter.");
      }
      newText = newText.trim();
      if (newText.length > 0) {
        return this.text = newText;
      } else {
        throw new Error("Tried to update message text to a blank string.");
      }
    };

    return UserMessage;

  })();

  module.exports = UserMessage;

}).call(this);
