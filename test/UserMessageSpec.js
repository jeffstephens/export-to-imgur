// Generated by CoffeeScript 1.7.1
(function() {
  var UserMessage, expect;

  expect = require('chai').expect;

  UserMessage = require('../js/UserMessage.js');

  describe('UserMessage', function() {
    var um;
    um = null;
    beforeEach(function() {
      return um = new UserMessage();
    });
    it('should initially have everything null except a timestamp', function() {
      expect(um.level).to.be["null"];
      expect(um.title).to.be["null"];
      expect(um.text).to.be["null"];
      expect(um.time).to.not.be["null"];
      return expect(um.time).to.be.above(0);
    });
    describe('When changing the message level', function() {
      it('should be able to change the message level to a valid value', function() {
        um.setLevel("info");
        expect(um.level).to.not.be["null"];
        return expect(um.level).to.equal("info");
      });
      it('should not change the message level to undefined', function() {
        um.setLevel("info");
        expect(function() {
          return um.setLevel();
        }).to["throw"](Error, /UserMessage.setLevel requires a level string as a parameter./);
        return expect(um.level).to.equal("info");
      });
      return it('should not be able to change the message level to an invalid value, and should throw an error', function() {
        expect(function() {
          return um.setLevel("lolwhat");
        }).to["throw"](Error, /lolwhat is not a valid message level./);
        return expect(um.level).to.be["null"];
      });
    });
    describe('When changing the message title', function() {
      it('should be able to change the message title', function() {
        um.setTitle("new title");
        expect(um.title).to.not.be["null"];
        return expect(um.title).to.equal("new title");
      });
      it('should not change the message title to an undefined value', function() {
        um.setTitle("new title");
        expect(function() {
          return um.setTitle();
        }).to["throw"](Error, /UserMessage.setTitle requires a text string as a parameter./);
        return expect(um.title).to.equal("new title");
      });
      return it('should not change the message title to a blank value', function() {
        um.setTitle("new title");
        expect(function() {
          return um.setTitle("");
        }).to["throw"](Error, /Tried to update message title to a blank string./);
        return expect(um.title).to.equal("new title");
      });
    });
    return describe('When changing the message text', function() {
      it('should be able to change the message text', function() {
        um.setText("new text");
        expect(um.text).to.not.be["null"];
        return expect(um.text).to.equal("new text");
      });
      it('should not change the message text to an undefined value', function() {
        um.setText("new text");
        expect(function() {
          return um.setText();
        }).to["throw"](Error, /UserMessage.setText requires a text string as a parameter./);
        return expect(um.text).to.equal("new text");
      });
      return it('should not change the message text to a blank value', function() {
        um.setText("new text");
        expect(function() {
          return um.setText("");
        }).to["throw"](Error, /Tried to update message text to a blank string./);
        return expect(um.text).to.equal("new text");
      });
    });
  });

}).call(this);
